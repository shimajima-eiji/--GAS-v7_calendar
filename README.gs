/*
 # はじめに
 １ファイルに１スクリプトが原則。Webエディタに準拠したいのでclaspでいい感じにやったりしない。
 グローバルで実行すると実行順が分からなくなるため、基本的に
 実装とテストが完了したものはfunctionからvar func = function()と、変数に置き換えていく。
 これでデバッグメニューから呼ばれることはない。
 
 →ただし、例外的にトリガーはfunctionとしておく。呼び出せなくなるからだ。

 # 基礎知識
 GASは基本的にイベント駆動であり、G Suite Developer Hubで管理できる場合はイベントトリガーに設定した関数が
 エンドポイントがコールされた場合はdoPostが発火する

 # 命名規則について
 ## 全体概要
 MVPを採用。M=モジュール、V=トリガー、P=インターフェース
 Presenterが膨れるので、I-inとI-outでデータクレンジングを分離する
 
 T: トリガー：上記ルールにより、すべてfunctionとしておく。MVC的位置づけとしてはViewに相当
 I: インターフェース: 呼ぶ側Tと呼ばれる側Mをつなぐコネクタのような位置づけ。クラス継承ができればこんなものは要らない。
 　  初期化.initializeで全部呼び出し、すべてのトリガーはinitializeを呼び出すという運用ルールが必要になってしまった。
   　そのため、initalizeで定義した変数はすべて大文字にする。その下は厳密に設定しない。
 M: モジュール：直接呼ばれることはないため、var func =function...としておく
    - 「L-小目的」：使いまわせそうなもの。「こういう時に使えたら便利」みたいな感覚。
    - 「S-対象名」：限定的な機能やサービスごとの専用モジュールなど使いまわしようがないもの。原則としてLを組み合わせて作る
    
 ## クラス（っぽいオブジェクト）の運用
 - すべてのトリガーはinitializeを継承する
 - すべてのインプットはJSONに置き換える（I_データJSON.gas）
   - 必要であれば、JSONをエンコードしてアウトプットしてもよい

 ### よくある「管理をどうするか・誰がやるか問題」
 まず、クラス（っぽいオブジェクト）はメソッドの集合体でデータを持たないことを大原則にしたい。
 データは上から下まで引数で管理するので、メソッドは必ず引数を返す。

 ## ファイル名
 上記概要に従い、分類を設定する。
 I:インターフェースの場合、I-inやI-out。厳密に言えばデコードだが、直感的ではないので不採用。
 M:
 
 ## 
 インターフェースはスネークケース
 クラス（モジュール）はキャメルケース
 グローバル変数は大文字
 グローバル関数は先頭大文字
 
 ### 補足：I-in, I-outができた経緯
 EndPointから持ってきたデータはe.parameter以下に格納されるが、それ以外は何も決まっていないため、すんごい渡され方をするものがいっぱいある。
 逆に、それぞれに対する入力も所定のフォーマットに作り直す必要があるので、汎用的なコンバータを作らないと血管が切れる。
 間違いなく車輪の再発明である。
 
 それなら、とコードをそのままドキュメントにしたいので、in-outはひとつのクラスで完結できるようにしたかった。
 たとえば、LineのInputをSlackのOutputにしたい場合、M_Line

 # プロパティとメッセージの使い分け
 プロパティは秘匿、メッセージは公開。
 具体的にはgithubのオープンリポジトリに全ソースを公開する。
 GitHub就活・転職の一貫である。
 
 # デバッグ
 ```
 function test() {
   実行したい関数();
 }
 ```
 を好きな場所に配置して実行するだけ。
 同一ファイル内に置いておくと読み込みエラーが回避できる
*/
